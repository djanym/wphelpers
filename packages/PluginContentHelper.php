<?php
/**
 * Helpers related to the content generated by plugins.
 * - Contact Form 7 Google Tag Manager event
 */

namespace Ricubai\WPHelpers;

/**
 * Class PluginContentHelper
 *
 * @package Ricubai\WPHelpers
 */
class PluginContentHelper {
    public static function cf7_submit_gtag_event( string $send_to ) {
        add_action( 'wp_footer', static function() use ( $send_to ) {
            ?>
            <script>
                document.addEventListener('wpcf7mailsent', function (event) {
                    gtag('event', 'conversion', {
                        'send_to': '<?php echo esc_attr( $send_to ); ?>',
                        'event_category': event.detail.contactFormId,
                        'event_label': event.detail.unitTag
                    });
                }, false);
            </script>
            <?php
        } );
    }

    /**
     * Add optgroup support for select fields in Contact Form 7.
     * How to use:
     *  1. Add optgroup- prefix to the option value.
     *  2. Add endoptgroup to the option value where you want to end the optgroup.
     *
     * @param string $field_id The ID of the select field.
     */
    public static function cf7_format_optgroup_for( string $field_id ) {
        add_action( 'wp_head', static function() use ( $field_id ) {
            ?>
            <script>
                jQuery(function ($) {
                    let sel = $('#<?php echo esc_attr( $field_id ); ?>').first(); // Custom selector ID.
                    let foundin = sel.find('option:contains("optgroup-")');
                    $.each(foundin, function (value) {
                        let updated = $(this).val().replace('optgroup-', '');
                        $(this).nextUntil('option:contains("endoptgroup")').wrapAll('<optgroup label="' + updated + '"></optgroup>');
                    });
                    sel.find('option:contains("optgroup-")').remove();
                    sel.find('option:contains("endoptgroup")').remove();
                });
            </script>
            <?php
        } );
    }

    /**
     * Disable CF7 auto paragraph formatting.
     *
     * @return void
     */
    public static function cf7_disable_autop() : void {
        add_filter( 'wpcf7_autop_or_not', '__return_false' );
    }

    /**
     * Checks if TOC should be shown on current page/post. Can be used in loop or single post template.
     *
     * @return bool
     */
    public static function is_show_toc() : bool {
        $toc_options = get_option( 'ez-toc-settings' );
        $post_type   = get_post_type();

        if ( ! $toc_options || ! is_singular() ) {
            return false;
        }

        $post_id = get_the_ID();

        // If autoinsert enabled for this post type and not disabled for a specific post.
        if ( isset( $toc_options['auto_insert_post_types'][ $post_type ] ) && ! get_post_meta( $post_id, '_ez-toc-disabled', true ) ) {
            return true;
        }

        // If autoinsert not enabled but this post type supports TOC. Then check if this specific post has TOC enabled.
        if ( isset( $toc_options['enabled_post_types'][ $post_type ] ) && get_post_meta( $post_id, '_ez-toc-insert', true ) ) {
            return true;
        }

        return false;
    }

    /**
     * Show the TOC outside the the_content().
     */
    public static function show_toc_outside_content() {
        if ( is_singular() ) {
            echo do_shortcode( '[ez-toc]' );

            // Add the TOC container class to hide it in the content section.
            add_filter( 'ez_toc_container_class', static function( $classes ) {
                $classes[] = 'display-none';

                return $classes;
            }, 10, 2 );

            // Disables the TOC from being added again. - Now working for manual insertion.
//        echo do_shortcode( '[no-ez-toc]' );
            // Remove the filter to prevent the TOC from being added again. - Now working for manual insertion.
//        remove_filter( 'the_content', array( 'ezTOC', 'the_content' ), 10 );
//        remove_filter( 'the_content', array( 'ezTOC', 'the_content' ), 100 );
//        add_filter( 'ez_toc_maybe_apply_the_content_filter', '__return_false', 110 );
        }
    }

}
